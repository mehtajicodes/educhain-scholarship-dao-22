
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// Supabase connection details
const SUPABASE_URL = "https://vmrffmebmvyqesmpevnl.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZtcmZmbWVibXZ5cWVzbXBldm5sIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDE5ODc0MTksImV4cCI6MjA1NzU2MzQxOX0.YNDPHNDxQNmZuV7ZAFbUtojENskPdqSH0lyaV5bDgUw";

// Create the Supabase client with proper authentication configuration
export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      persistSession: true,
      autoRefreshToken: true,
      detectSessionInUrl: false,
    },
    global: {
      headers: {},
    },
  }
);

// Use local storage to manage authentication state without hitting rate limits
const WALLET_AUTH_KEY = 'wallet_auth_status';

// This function should be called when a wallet is connected
export const authenticateWithWallet = async (address: string) => {
  if (!address) return { error: "No wallet address provided" };
  
  try {
    // First check if we have already authenticated this wallet in this session
    const authStatus = localStorage.getItem(WALLET_AUTH_KEY);
    if (authStatus) {
      const parsed = JSON.parse(authStatus);
      if (parsed.address === address.toLowerCase()) {
        console.log("Using cached authentication for wallet:", address);
        return { data: parsed, error: null };
      }
    }
    
    // Get the current session
    const { data: { session } } = await supabase.auth.getSession();
    
    // If we already have a session, return it
    if (session) {
      const authData = { 
        session, 
        user: { id: address, wallet_address: address } 
      };
      localStorage.setItem(WALLET_AUTH_KEY, JSON.stringify({
        address: address.toLowerCase(),
        ...authData
      }));
      return { data: authData, error: null };
    }
    
    // For anonymous access, we'll just use the address as the identifier
    // without actually authenticating with Supabase to avoid rate limits
    const mockAuthData = {
      user: { id: address, wallet_address: address }
    };
    
    localStorage.setItem(WALLET_AUTH_KEY, JSON.stringify({
      address: address.toLowerCase(),
      ...mockAuthData
    }));
    
    return { data: mockAuthData, error: null };
  } catch (error) {
    console.error("Error authenticating with wallet:", error);
    // Provide a fallback to continue operation even if auth fails
    return { 
      data: { user: { id: address, wallet_address: address } },
      error: null
    };
  }
};

// Helper to get the current authenticated wallet
export const getAuthenticatedWallet = () => {
  const authStatus = localStorage.getItem(WALLET_AUTH_KEY);
  if (!authStatus) return null;
  
  try {
    const parsed = JSON.parse(authStatus);
    return parsed.address || null;
  } catch (e) {
    return null;
  }
};
